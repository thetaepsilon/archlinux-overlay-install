#!/bin/sh
# mountapifs
# runs a command while holding certain essential API mount-points in a chroot prefix open.
# the mount points are cleaned up on termination.

err() { echo "$@" >&2; }
usage() {
	err "Usage: $0 prefix command [args...]";
	exit 1;
}

r="$1";
shift;
if test -z "$r"; then usage; fi;
if test $# -lt 1; then usage; fi;

# at least for pacman installations, not the entire /dev needs to be accessible.
# instead just mount a restricted tmpfs with the essentials that could be used in a script.
spawndev() {
	_path="$1";
	mount -t tmpfs -o size=0,uid=0,gid=0,mode=755,nr_inodes=8 "fakedev" "$_path" || return $?;
	(
		cd "$_path" || return $?;
		# see /sys/devices/virtual/mem
		mknod -m 666 null c 1 3 || exit $?;
		mknod -m 666 zero c 1 5 || exit $?;
		mknod -m 666 full c 1 7 || exit $?;
		mknod -m 644 urandom c 1 9 || exit $?;
		# yeah, I know,  but urandom *is* cryptographically secure.
		# automated install is about speed.
		ln -s urandom random || exit $?;
	) || exit $?;
}



cleanup() {
	echo "# Cleaning up mounts...";
	umount "$r/sys/";
	umount "$r/proc/";
	umount "$r/dev/";
}
trap cleanup EXIT;

e=0;
mount -t proc proc "$r/proc/" && {
	proc=1;
	mount -t sysfs sysfs "$r/sys/" && {
		sys=1;
		spawndev "$r/dev/" && {
			dev=1;
			"$@";
		} || exit $?;
	} || exit $?;
} || exit $?;

